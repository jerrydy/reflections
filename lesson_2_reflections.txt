What happens when you initialize a repository? Why do you need to do it?

	It adds a .git directory for git to put management information in. It is needed so git knows to start keeping track of the reposity files.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is part of the repository.

How can you use the staging area to make sure you have one commit per logical change?

	Only add to the staging area modifications that are part of the same logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	When you want make experimental changes to a file

How do the diagrams help you visualize the branch structure?

	It easily lets me know the tree structure.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	It combines all the changes.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Automatic merging saves time and effort. But Git may mistakenly merge files incorrectly.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	This may slow down Git especially if many changes are being made to the remote

Describe the differences between forks, clones, and branches. When would you use one instead of another?

	Forking is used to clone a Github repository to your own id. Clones are used to copy another repository (from Github or otherwise). Branching is a way of isolating changes made to files in a repository.

What is the benefit of having a copy of the last known state of the remote stored locally?

	It makes merging and resolving conflicts easier.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	Using email. GitHub would be easier.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	Use a separate branch if you're collaborating with other people or you're working multiple projects on the same repository.